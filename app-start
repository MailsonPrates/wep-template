#!/usr/bin/env php
<?php

(new Start())->run($argv);


class Start
{
    private $flag = __DIR__.'/storage/log/started.txt';

    public function run($args=[])
    {
        $options = array_slice($args, 1) ?? [];
        $is_again = ($options[0] ?? null) == 'again'; 

        $this->validateDependencies();

        $this->handleAppParams($is_again);
        
        // Executa comandos
        $this->handleInstalls();

        // Remove arquivos de start
        $this->removeStart();

    } 

    public function validateDependencies()
    {
        if ( !$this->isInstalled('composer') ){
            return $this->console('error', 'Composer não instalado!');
        }

        if ( !$this->isInstalled('npm') ){
            return $this->console('error', 'NPM não instalado!');
        }
    }

    public function handleAppParams($again=false)
    {
        $started_filename_flag = $this->flag;
        $has_started_before = file_exists($started_filename_flag);

        if ( $has_started_before && !$again ) return;

        $again = $has_started_before && $again;

        Console::ask('Qual é o nome da aplicação?', function($name) use($again){

            $filename = __DIR__ . '/config/app.php';
            $content = file_get_contents($filename);
            $prev_value = 'Minha aplicação';

            if ( $again ){
                $parts = explode("'name' => '", $content);
                $prev_value = explode("',", $parts[1])[0] ?? $prev_value;
            }

            $content = str_replace($prev_value, $name, $content);
            file_put_contents($filename, $content);
        });

        Console::ask('Qual é a url?', function($url) use($again){
            $has_last_slash = substr($url, -1) == '/';
            $url = $has_last_slash
                ? rtrim($url, '/')
                : $url;
            
            $filename = __DIR__ . '/config/.env';
            $content = file_get_contents($filename);
            $prev_value = '';
            
            if ( $again ){
                $parts = explode("APP_URL=", $content);
                $prev_value = explode("\r", $parts[1])[0] ?? $prev_value;
            }

            $content = str_replace('APP_URL='.$prev_value, "APP_URL=$url", $content);
            file_put_contents($filename, $content);
        });

        file_put_contents($started_filename_flag, 'true');
    }

    public function handleInstalls()
    {
        Console::log('alert', 'Aguarde, iniciando dependências');
        echo "\n";
        
        Console::log('info', 'Atualizando composer...');
        if (passthru('composer update') === false) exit();

        Console::log('info', 'Atualizando npm...');
        if (passthru('npm install') === false) exit();
        
        Console::log('info', 'Atualizando app...');
        if (passthru('php app update') === false) exit();

        echo "\n";
        Console::log('success', 'App inicializado com sucesso!');
        echo "\n";
        echo 'Para entrar em modo DEV, execute o comando > npm run dev';
        echo "\n\n";
    }

    public function removeStart()
    {
        if ( file_exists($this->flag) ) unlink($this->flag);
        
        unlink(__DIR__. '/app-start');
    }

    public function isInstalled($package='')
    {
        $output = shell_exec('where ' . $package);
        return !empty($output);
    }

    public function console($type='error', $message='', $exit=true)
    {
        Console::log($type, $message);

        if ( $exit ) exit();
    }
}


class Console
{
    public static function ask($text='', $callback)
    {
        echo $text . ' ';

        $input = trim( fgets( STDIN ) );

        if ( !empty($input) ){
            $callback($input);
        }

        echo "\n";
    }

    public static function log($props=[], $message=null, $new_line=true)
    {

        $modes = [
            "success" => [
                "title" => "SUCESSO",
                "colors" => self::getColor('white', 'green')
            ],
            "error" => [
                "title" => "ERRO",
                "colors" => self::getColor('white', 'red')
            ],
            "alert" => [
                "title" => "ALERTA",
                "colors" => self::getColor('white', 'yellow')
            ],
            "info" => [
                "title" => "INFO",
                "colors" => self::getColor('white', 'blue')
            ],
            "custom" => [
                "title" => "",
                "colors" => self::getColor('black', 'light')
            ]
        ];

        if ( is_string($props) ){
            $mode = $modes[$props] ?? null;

            if ( !$mode && str_contains($props, ":") ){
                $parts = explode(":", $props);
                $title = $parts[1];
                $mode = $modes["custom"];

                $mode["title"] = $title;
            }

            echo self::setModeResponse($mode, $message);
        }

    }

    private static function getColor($font="white", $bg=null)
    {
        $fonts = [
            "white" => "1;37",
            "black" => "0;30"
        ];

        $bgs = [
            "green" => "42",
            "red" => "41",
            "blue" => "44",
            "yellow" => "43" ,
            "light" => "47"
        ];

        return $fonts[$font]. ";" . $bgs[$bg];
    }

    private static function setModeResponse($mode, $message)
    {
        echo "\e[".$mode['colors']."m ".$mode['title']." \e[0m ".$message . "\n";
    }

}